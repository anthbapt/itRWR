Metadata-Version: 2.1
Name: itRWR
Version: 0.1
Author: Cécile Beust, Anthony Baptista, Ozan Ozisik, Anaïs Baudot
Author-email: cecile.beust@etudiant.univ-rennes.fr, anthony.baptista@qmul.ac.uk, ozan.OZISIK@univ-amu.fr
License: MIT
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Physics

=============================================================================================
itRWR : MultiXrank based algorithm for Community Identification using Iterative Random Walk with Restart
=============================================================================================

.. image:: https://github.com/anthbapt/itRWR/workflows/CI/badge.svg
    :target: https://github.com/anthbapt/itRWR/actions?query=branch%3Amaster+workflow%3ACI
 
This repository contains an algorithm allowing to perform an iterative random walk with restart on a multiplex network, in order to identify disease-associated communities. This algorithm is based on 
MultiXrank (https://github.com/anthbapt/multixrank), a Python package allowing to perform random walk with restart on universal multilayer networks.

-----------------
 Installation
-----------------

                                
.. code-block:: bash    

  $ python setup.py install

         
-----------------
 Library Codes
-----------------

* ``community.py`` : Python script containing the function for community identification based on iterative random walk with restart
* ``create_config_seed_files.py`` : Python script to generate the configuration yml files and the files containing the seeds (causative genes) for each disease
* ``run_community_ID.py`` : Main Python script containing the function to automatize the community identification for a list of diseases


-----------------
Data
-----------------


``multiplex`` : This folder contains a toy example of a multiplex biological network composed of five layers (PPI, Pathways, Co-expression, Complexes, Disease involvement). The whole networks used in this study are available on the NDEX server : `<https://www.ndexbio.org/index.html#/search?searchType=All&searchString=cecile.beust&searchTermExpansion=false>`_

``orpha_codes_PA.txt`` : File containing Premature Aging disease identifiers and their associated causative genes from ORPHANET (`<https://www.orpha.net/consor4.01/www/cgi-bin/?lng=ENG>`_)

The ``ToyExample`` folder contains the toy example version of the multiplex network to run the community identification for one disease example, and with 10 iterations.

-----------------
Usage
-----------------

After having checked and/or modified the script parameters in accordance to your data, set the desired number of iterations and run the following Python code : 

.. code-block:: python

    from itRWR import community_identification 
    import os

    path = os.path.dirname(os.path.realpath(__file__))
    path = path + '/'
    os.chdir(path)

    list_disease = "orpha_codes_PA.txt"
    num_iteration = 10
    community_identification(path, list_disease, num_iteration)


This will create seeds files, configuration files, and output folders for each disease. The community identified for a disease is contained in the file seeds_ID.txt (where ID is the ORPHANET identifier of the disease) inside the corresponding output folder.

-----------------
Example
-----------------
terative rand
To test the algorithm on a simple example you can run the version of the script ``run.py`` contained in the ``ToyExample`` folder. This will apply community identification for one disease, Hutchinson-Gilford Progeria Syndrome (ORPHANET code: 740) on a simple multiplex network, with a maximal number of iterations set to 10 for the itRWR algorithm. 

It will generate the following output folder : ``results_10_740``. This folder contains a copy of the configuration file used for the community identification for this disease. It contains also a file ``multiplex_1.tsv`` containing the rankings for each node of the multiplex network after the itRWR has been applied. The file ``seeds_740.txt`` contains the nodes of the community identified for the disease. Since we applied 10 iterations of the algorithm, and that the disease has 2 starting seeds, the final community obtained contains 12 nodes. 
